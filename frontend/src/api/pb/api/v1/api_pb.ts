// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/v1/api.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Sodan
 *
 * @generated from message api.v1.CreateSodanRequest
 */
export class CreateSodanRequest extends Message<CreateSodanRequest> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: string creater_id = 3;
   */
  createrId = "";

  /**
   * @generated from field: repeated api.v1.Tag tags = 4;
   */
  tags: Tag[] = [];

  constructor(data?: PartialMessage<CreateSodanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreateSodanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "creater_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tags", kind: "message", T: Tag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSodanRequest {
    return new CreateSodanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSodanRequest {
    return new CreateSodanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSodanRequest {
    return new CreateSodanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSodanRequest | PlainMessage<CreateSodanRequest> | undefined, b: CreateSodanRequest | PlainMessage<CreateSodanRequest> | undefined): boolean {
    return proto3.util.equals(CreateSodanRequest, a, b);
  }
}

/**
 * @generated from message api.v1.CreateSodanResponse
 */
export class CreateSodanResponse extends Message<CreateSodanResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<CreateSodanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreateSodanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSodanResponse {
    return new CreateSodanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSodanResponse {
    return new CreateSodanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSodanResponse {
    return new CreateSodanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSodanResponse | PlainMessage<CreateSodanResponse> | undefined, b: CreateSodanResponse | PlainMessage<CreateSodanResponse> | undefined): boolean {
    return proto3.util.equals(CreateSodanResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetSodanRequest
 */
export class GetSodanRequest extends Message<GetSodanRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetSodanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSodanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSodanRequest {
    return new GetSodanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSodanRequest {
    return new GetSodanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSodanRequest {
    return new GetSodanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSodanRequest | PlainMessage<GetSodanRequest> | undefined, b: GetSodanRequest | PlainMessage<GetSodanRequest> | undefined): boolean {
    return proto3.util.equals(GetSodanRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetSodanResponse
 */
export class GetSodanResponse extends Message<GetSodanResponse> {
  /**
   * @generated from field: api.v1.Sodan sodan = 1;
   */
  sodan?: Sodan;

  constructor(data?: PartialMessage<GetSodanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSodanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sodan", kind: "message", T: Sodan },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSodanResponse {
    return new GetSodanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSodanResponse {
    return new GetSodanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSodanResponse {
    return new GetSodanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSodanResponse | PlainMessage<GetSodanResponse> | undefined, b: GetSodanResponse | PlainMessage<GetSodanResponse> | undefined): boolean {
    return proto3.util.equals(GetSodanResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetSodanListResponse
 */
export class GetSodanListResponse extends Message<GetSodanListResponse> {
  /**
   * @generated from field: repeated api.v1.Sodan sodans = 1;
   */
  sodans: Sodan[] = [];

  constructor(data?: PartialMessage<GetSodanListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSodanListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sodans", kind: "message", T: Sodan, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSodanListResponse {
    return new GetSodanListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSodanListResponse {
    return new GetSodanListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSodanListResponse {
    return new GetSodanListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSodanListResponse | PlainMessage<GetSodanListResponse> | undefined, b: GetSodanListResponse | PlainMessage<GetSodanListResponse> | undefined): boolean {
    return proto3.util.equals(GetSodanListResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetSodansByTagRequest
 */
export class GetSodansByTagRequest extends Message<GetSodansByTagRequest> {
  /**
   * @generated from field: string tag_name = 1;
   */
  tagName = "";

  constructor(data?: PartialMessage<GetSodansByTagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSodansByTagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSodansByTagRequest {
    return new GetSodansByTagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSodansByTagRequest {
    return new GetSodansByTagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSodansByTagRequest {
    return new GetSodansByTagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSodansByTagRequest | PlainMessage<GetSodansByTagRequest> | undefined, b: GetSodansByTagRequest | PlainMessage<GetSodansByTagRequest> | undefined): boolean {
    return proto3.util.equals(GetSodansByTagRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetSodansByTagResponse
 */
export class GetSodansByTagResponse extends Message<GetSodansByTagResponse> {
  /**
   * @generated from field: repeated api.v1.Sodan sodans = 1;
   */
  sodans: Sodan[] = [];

  constructor(data?: PartialMessage<GetSodansByTagResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSodansByTagResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sodans", kind: "message", T: Sodan, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSodansByTagResponse {
    return new GetSodansByTagResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSodansByTagResponse {
    return new GetSodansByTagResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSodansByTagResponse {
    return new GetSodansByTagResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSodansByTagResponse | PlainMessage<GetSodansByTagResponse> | undefined, b: GetSodansByTagResponse | PlainMessage<GetSodansByTagResponse> | undefined): boolean {
    return proto3.util.equals(GetSodansByTagResponse, a, b);
  }
}

/**
 * @generated from message api.v1.CloseSodanRequest
 */
export class CloseSodanRequest extends Message<CloseSodanRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<CloseSodanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CloseSodanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseSodanRequest {
    return new CloseSodanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseSodanRequest {
    return new CloseSodanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseSodanRequest {
    return new CloseSodanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CloseSodanRequest | PlainMessage<CloseSodanRequest> | undefined, b: CloseSodanRequest | PlainMessage<CloseSodanRequest> | undefined): boolean {
    return proto3.util.equals(CloseSodanRequest, a, b);
  }
}

/**
 * Chat
 *
 * @generated from message api.v1.CreateReplyRequest
 */
export class CreateReplyRequest extends Message<CreateReplyRequest> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: string creater_id = 2;
   */
  createrId = "";

  /**
   * @generated from field: uint64 sodan_id = 3;
   */
  sodanId = protoInt64.zero;

  constructor(data?: PartialMessage<CreateReplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreateReplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creater_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sodan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReplyRequest {
    return new CreateReplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReplyRequest {
    return new CreateReplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReplyRequest {
    return new CreateReplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReplyRequest | PlainMessage<CreateReplyRequest> | undefined, b: CreateReplyRequest | PlainMessage<CreateReplyRequest> | undefined): boolean {
    return proto3.util.equals(CreateReplyRequest, a, b);
  }
}

/**
 * @generated from message api.v1.CreateReplyResponse
 */
export class CreateReplyResponse extends Message<CreateReplyResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<CreateReplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CreateReplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReplyResponse {
    return new CreateReplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReplyResponse {
    return new CreateReplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReplyResponse {
    return new CreateReplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReplyResponse | PlainMessage<CreateReplyResponse> | undefined, b: CreateReplyResponse | PlainMessage<CreateReplyResponse> | undefined): boolean {
    return proto3.util.equals(CreateReplyResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetReplyRequest
 */
export class GetReplyRequest extends Message<GetReplyRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetReplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetReplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReplyRequest {
    return new GetReplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReplyRequest {
    return new GetReplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReplyRequest {
    return new GetReplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetReplyRequest | PlainMessage<GetReplyRequest> | undefined, b: GetReplyRequest | PlainMessage<GetReplyRequest> | undefined): boolean {
    return proto3.util.equals(GetReplyRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetReplyResponse
 */
export class GetReplyResponse extends Message<GetReplyResponse> {
  /**
   * @generated from field: api.v1.Reply reply = 1;
   */
  reply?: Reply;

  constructor(data?: PartialMessage<GetReplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetReplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reply", kind: "message", T: Reply },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReplyResponse {
    return new GetReplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReplyResponse {
    return new GetReplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReplyResponse {
    return new GetReplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetReplyResponse | PlainMessage<GetReplyResponse> | undefined, b: GetReplyResponse | PlainMessage<GetReplyResponse> | undefined): boolean {
    return proto3.util.equals(GetReplyResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetRepliesRequest
 */
export class GetRepliesRequest extends Message<GetRepliesRequest> {
  /**
   * @generated from field: uint64 sodan_id = 1;
   */
  sodanId = protoInt64.zero;

  constructor(data?: PartialMessage<GetRepliesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetRepliesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sodan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepliesRequest {
    return new GetRepliesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepliesRequest {
    return new GetRepliesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepliesRequest {
    return new GetRepliesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepliesRequest | PlainMessage<GetRepliesRequest> | undefined, b: GetRepliesRequest | PlainMessage<GetRepliesRequest> | undefined): boolean {
    return proto3.util.equals(GetRepliesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetRepliesResponse
 */
export class GetRepliesResponse extends Message<GetRepliesResponse> {
  /**
   * @generated from field: repeated api.v1.Reply replies = 1;
   */
  replies: Reply[] = [];

  constructor(data?: PartialMessage<GetRepliesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetRepliesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replies", kind: "message", T: Reply, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepliesResponse {
    return new GetRepliesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepliesResponse {
    return new GetRepliesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepliesResponse {
    return new GetRepliesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepliesResponse | PlainMessage<GetRepliesResponse> | undefined, b: GetRepliesResponse | PlainMessage<GetRepliesResponse> | undefined): boolean {
    return proto3.util.equals(GetRepliesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.SubscribeSodanRequest
 */
export class SubscribeSodanRequest extends Message<SubscribeSodanRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<SubscribeSodanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SubscribeSodanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeSodanRequest {
    return new SubscribeSodanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeSodanRequest {
    return new SubscribeSodanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeSodanRequest {
    return new SubscribeSodanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeSodanRequest | PlainMessage<SubscribeSodanRequest> | undefined, b: SubscribeSodanRequest | PlainMessage<SubscribeSodanRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeSodanRequest, a, b);
  }
}

/**
 * @generated from message api.v1.SubscribeSodanResponse
 */
export class SubscribeSodanResponse extends Message<SubscribeSodanResponse> {
  /**
   * @generated from field: api.v1.Reply reply = 1;
   */
  reply?: Reply;

  constructor(data?: PartialMessage<SubscribeSodanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SubscribeSodanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reply", kind: "message", T: Reply },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeSodanResponse {
    return new SubscribeSodanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeSodanResponse {
    return new SubscribeSodanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeSodanResponse {
    return new SubscribeSodanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeSodanResponse | PlainMessage<SubscribeSodanResponse> | undefined, b: SubscribeSodanResponse | PlainMessage<SubscribeSodanResponse> | undefined): boolean {
    return proto3.util.equals(SubscribeSodanResponse, a, b);
  }
}

/**
 * Entities
 *
 * @generated from message api.v1.Sodan
 */
export class Sodan extends Message<Sodan> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string text = 3;
   */
  text = "";

  /**
   * @generated from field: string creater_id = 4;
   */
  createrId = "";

  /**
   * @generated from field: bool is_closed = 5;
   */
  isClosed = false;

  /**
   * @generated from field: repeated api.v1.Tag tags = 6;
   */
  tags: Tag[] = [];

  constructor(data?: PartialMessage<Sodan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Sodan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "creater_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "tags", kind: "message", T: Tag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sodan {
    return new Sodan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sodan {
    return new Sodan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sodan {
    return new Sodan().fromJsonString(jsonString, options);
  }

  static equals(a: Sodan | PlainMessage<Sodan> | undefined, b: Sodan | PlainMessage<Sodan> | undefined): boolean {
    return proto3.util.equals(Sodan, a, b);
  }
}

/**
 * @generated from message api.v1.Tag
 */
export class Tag extends Message<Tag> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<Tag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Tag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tag {
    return new Tag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tag {
    return new Tag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tag {
    return new Tag().fromJsonString(jsonString, options);
  }

  static equals(a: Tag | PlainMessage<Tag> | undefined, b: Tag | PlainMessage<Tag> | undefined): boolean {
    return proto3.util.equals(Tag, a, b);
  }
}

/**
 * @generated from message api.v1.Reply
 */
export class Reply extends Message<Reply> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: string creater_id = 3;
   */
  createrId = "";

  /**
   * @generated from field: uint64 sodan_id = 4;
   */
  sodanId = protoInt64.zero;

  constructor(data?: PartialMessage<Reply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Reply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "creater_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "sodan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reply {
    return new Reply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reply {
    return new Reply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reply {
    return new Reply().fromJsonString(jsonString, options);
  }

  static equals(a: Reply | PlainMessage<Reply> | undefined, b: Reply | PlainMessage<Reply> | undefined): boolean {
    return proto3.util.equals(Reply, a, b);
  }
}

