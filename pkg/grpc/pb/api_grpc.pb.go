// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APIService_CreateSodan_FullMethodName        = "/api.APIService/CreateSodan"
	APIService_GetSodan_FullMethodName           = "/api.APIService/GetSodan"
	APIService_CloseSodan_FullMethodName         = "/api.APIService/CloseSodan"
	APIService_CreateReply_FullMethodName        = "/api.APIService/CreateReply"
	APIService_GetReply_FullMethodName           = "/api.APIService/GetReply"
	APIService_GetReplies_FullMethodName         = "/api.APIService/GetReplies"
	APIService_SubscribeSodan_FullMethodName     = "/api.APIService/SubscribeSodan"
	APIService_StopSubscribeSodan_FullMethodName = "/api.APIService/StopSubscribeSodan"
)

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	// Sodan
	CreateSodan(ctx context.Context, in *CreateSodanRequest, opts ...grpc.CallOption) (*CreateSodanResponse, error)
	GetSodan(ctx context.Context, in *GetSodanRequest, opts ...grpc.CallOption) (*GetSodanResponse, error)
	CloseSodan(ctx context.Context, in *CloseSodanRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Chat
	CreateReply(ctx context.Context, in *CreateReplyRequest, opts ...grpc.CallOption) (*CreateReplyResponse, error)
	GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*GetReplyResponse, error)
	GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesResponse, error)
	SubscribeSodan(ctx context.Context, in *SubscribeSodanRequest, opts ...grpc.CallOption) (APIService_SubscribeSodanClient, error)
	StopSubscribeSodan(ctx context.Context, in *StopSubscribeSodanRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) CreateSodan(ctx context.Context, in *CreateSodanRequest, opts ...grpc.CallOption) (*CreateSodanResponse, error) {
	out := new(CreateSodanResponse)
	err := c.cc.Invoke(ctx, APIService_CreateSodan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetSodan(ctx context.Context, in *GetSodanRequest, opts ...grpc.CallOption) (*GetSodanResponse, error) {
	out := new(GetSodanResponse)
	err := c.cc.Invoke(ctx, APIService_GetSodan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CloseSodan(ctx context.Context, in *CloseSodanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, APIService_CloseSodan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateReply(ctx context.Context, in *CreateReplyRequest, opts ...grpc.CallOption) (*CreateReplyResponse, error) {
	out := new(CreateReplyResponse)
	err := c.cc.Invoke(ctx, APIService_CreateReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*GetReplyResponse, error) {
	out := new(GetReplyResponse)
	err := c.cc.Invoke(ctx, APIService_GetReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesResponse, error) {
	out := new(GetRepliesResponse)
	err := c.cc.Invoke(ctx, APIService_GetReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SubscribeSodan(ctx context.Context, in *SubscribeSodanRequest, opts ...grpc.CallOption) (APIService_SubscribeSodanClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIService_ServiceDesc.Streams[0], APIService_SubscribeSodan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceSubscribeSodanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_SubscribeSodanClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type aPIServiceSubscribeSodanClient struct {
	grpc.ClientStream
}

func (x *aPIServiceSubscribeSodanClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) StopSubscribeSodan(ctx context.Context, in *StopSubscribeSodanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, APIService_StopSubscribeSodan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	// Sodan
	CreateSodan(context.Context, *CreateSodanRequest) (*CreateSodanResponse, error)
	GetSodan(context.Context, *GetSodanRequest) (*GetSodanResponse, error)
	CloseSodan(context.Context, *CloseSodanRequest) (*empty.Empty, error)
	// Chat
	CreateReply(context.Context, *CreateReplyRequest) (*CreateReplyResponse, error)
	GetReply(context.Context, *GetReplyRequest) (*GetReplyResponse, error)
	GetReplies(context.Context, *GetRepliesRequest) (*GetRepliesResponse, error)
	SubscribeSodan(*SubscribeSodanRequest, APIService_SubscribeSodanServer) error
	StopSubscribeSodan(context.Context, *StopSubscribeSodanRequest) (*empty.Empty, error)
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) CreateSodan(context.Context, *CreateSodanRequest) (*CreateSodanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSodan not implemented")
}
func (UnimplementedAPIServiceServer) GetSodan(context.Context, *GetSodanRequest) (*GetSodanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSodan not implemented")
}
func (UnimplementedAPIServiceServer) CloseSodan(context.Context, *CloseSodanRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSodan not implemented")
}
func (UnimplementedAPIServiceServer) CreateReply(context.Context, *CreateReplyRequest) (*CreateReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReply not implemented")
}
func (UnimplementedAPIServiceServer) GetReply(context.Context, *GetReplyRequest) (*GetReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReply not implemented")
}
func (UnimplementedAPIServiceServer) GetReplies(context.Context, *GetRepliesRequest) (*GetRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplies not implemented")
}
func (UnimplementedAPIServiceServer) SubscribeSodan(*SubscribeSodanRequest, APIService_SubscribeSodanServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSodan not implemented")
}
func (UnimplementedAPIServiceServer) StopSubscribeSodan(context.Context, *StopSubscribeSodanRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSubscribeSodan not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_CreateSodan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSodanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateSodan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CreateSodan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateSodan(ctx, req.(*CreateSodanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetSodan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSodanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetSodan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetSodan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetSodan(ctx, req.(*GetSodanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CloseSodan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSodanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CloseSodan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CloseSodan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CloseSodan(ctx, req.(*CloseSodanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CreateReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateReply(ctx, req.(*CreateReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetReply(ctx, req.(*GetReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetReplies(ctx, req.(*GetRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SubscribeSodan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSodanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).SubscribeSodan(m, &aPIServiceSubscribeSodanServer{stream})
}

type APIService_SubscribeSodanServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type aPIServiceSubscribeSodanServer struct {
	grpc.ServerStream
}

func (x *aPIServiceSubscribeSodanServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_StopSubscribeSodan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSubscribeSodanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).StopSubscribeSodan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_StopSubscribeSodan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).StopSubscribeSodan(ctx, req.(*StopSubscribeSodanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSodan",
			Handler:    _APIService_CreateSodan_Handler,
		},
		{
			MethodName: "GetSodan",
			Handler:    _APIService_GetSodan_Handler,
		},
		{
			MethodName: "CloseSodan",
			Handler:    _APIService_CloseSodan_Handler,
		},
		{
			MethodName: "CreateReply",
			Handler:    _APIService_CreateReply_Handler,
		},
		{
			MethodName: "GetReply",
			Handler:    _APIService_GetReply_Handler,
		},
		{
			MethodName: "GetReplies",
			Handler:    _APIService_GetReplies_Handler,
		},
		{
			MethodName: "StopSubscribeSodan",
			Handler:    _APIService_StopSubscribeSodan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSodan",
			Handler:       _APIService_SubscribeSodan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
