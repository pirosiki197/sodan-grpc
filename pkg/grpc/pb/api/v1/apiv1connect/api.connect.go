// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/api.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pirosiki197/sodan-grpc/pkg/grpc/pb/api/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// APIServiceName is the fully-qualified name of the APIService service.
	APIServiceName = "api.v1.APIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APIServiceCreateSodanProcedure is the fully-qualified name of the APIService's CreateSodan RPC.
	APIServiceCreateSodanProcedure = "/api.v1.APIService/CreateSodan"
	// APIServiceGetSodanProcedure is the fully-qualified name of the APIService's GetSodan RPC.
	APIServiceGetSodanProcedure = "/api.v1.APIService/GetSodan"
	// APIServiceGetSodanListProcedure is the fully-qualified name of the APIService's GetSodanList RPC.
	APIServiceGetSodanListProcedure = "/api.v1.APIService/GetSodanList"
	// APIServiceCloseSodanProcedure is the fully-qualified name of the APIService's CloseSodan RPC.
	APIServiceCloseSodanProcedure = "/api.v1.APIService/CloseSodan"
	// APIServiceCreateReplyProcedure is the fully-qualified name of the APIService's CreateReply RPC.
	APIServiceCreateReplyProcedure = "/api.v1.APIService/CreateReply"
	// APIServiceGetReplyProcedure is the fully-qualified name of the APIService's GetReply RPC.
	APIServiceGetReplyProcedure = "/api.v1.APIService/GetReply"
	// APIServiceGetRepliesProcedure is the fully-qualified name of the APIService's GetReplies RPC.
	APIServiceGetRepliesProcedure = "/api.v1.APIService/GetReplies"
	// APIServiceSubscribeSodanProcedure is the fully-qualified name of the APIService's SubscribeSodan
	// RPC.
	APIServiceSubscribeSodanProcedure = "/api.v1.APIService/SubscribeSodan"
)

// APIServiceClient is a client for the api.v1.APIService service.
type APIServiceClient interface {
	// Sodan
	CreateSodan(context.Context, *connect.Request[v1.CreateSodanRequest]) (*connect.Response[v1.CreateSodanResponse], error)
	GetSodan(context.Context, *connect.Request[v1.GetSodanRequest]) (*connect.Response[v1.GetSodanResponse], error)
	// 10個ぐらい最新のを取得する
	GetSodanList(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSodanListResponse], error)
	CloseSodan(context.Context, *connect.Request[v1.CloseSodanRequest]) (*connect.Response[emptypb.Empty], error)
	// Chat
	CreateReply(context.Context, *connect.Request[v1.CreateReplyRequest]) (*connect.Response[v1.CreateReplyResponse], error)
	GetReply(context.Context, *connect.Request[v1.GetReplyRequest]) (*connect.Response[v1.GetReplyResponse], error)
	GetReplies(context.Context, *connect.Request[v1.GetRepliesRequest]) (*connect.Response[v1.GetRepliesResponse], error)
	SubscribeSodan(context.Context, *connect.Request[v1.SubscribeSodanRequest]) (*connect.ServerStreamForClient[v1.SubscribeSodanResponse], error)
}

// NewAPIServiceClient constructs a client for the api.v1.APIService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) APIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aPIServiceClient{
		createSodan: connect.NewClient[v1.CreateSodanRequest, v1.CreateSodanResponse](
			httpClient,
			baseURL+APIServiceCreateSodanProcedure,
			opts...,
		),
		getSodan: connect.NewClient[v1.GetSodanRequest, v1.GetSodanResponse](
			httpClient,
			baseURL+APIServiceGetSodanProcedure,
			opts...,
		),
		getSodanList: connect.NewClient[emptypb.Empty, v1.GetSodanListResponse](
			httpClient,
			baseURL+APIServiceGetSodanListProcedure,
			opts...,
		),
		closeSodan: connect.NewClient[v1.CloseSodanRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceCloseSodanProcedure,
			opts...,
		),
		createReply: connect.NewClient[v1.CreateReplyRequest, v1.CreateReplyResponse](
			httpClient,
			baseURL+APIServiceCreateReplyProcedure,
			opts...,
		),
		getReply: connect.NewClient[v1.GetReplyRequest, v1.GetReplyResponse](
			httpClient,
			baseURL+APIServiceGetReplyProcedure,
			opts...,
		),
		getReplies: connect.NewClient[v1.GetRepliesRequest, v1.GetRepliesResponse](
			httpClient,
			baseURL+APIServiceGetRepliesProcedure,
			opts...,
		),
		subscribeSodan: connect.NewClient[v1.SubscribeSodanRequest, v1.SubscribeSodanResponse](
			httpClient,
			baseURL+APIServiceSubscribeSodanProcedure,
			opts...,
		),
	}
}

// aPIServiceClient implements APIServiceClient.
type aPIServiceClient struct {
	createSodan    *connect.Client[v1.CreateSodanRequest, v1.CreateSodanResponse]
	getSodan       *connect.Client[v1.GetSodanRequest, v1.GetSodanResponse]
	getSodanList   *connect.Client[emptypb.Empty, v1.GetSodanListResponse]
	closeSodan     *connect.Client[v1.CloseSodanRequest, emptypb.Empty]
	createReply    *connect.Client[v1.CreateReplyRequest, v1.CreateReplyResponse]
	getReply       *connect.Client[v1.GetReplyRequest, v1.GetReplyResponse]
	getReplies     *connect.Client[v1.GetRepliesRequest, v1.GetRepliesResponse]
	subscribeSodan *connect.Client[v1.SubscribeSodanRequest, v1.SubscribeSodanResponse]
}

// CreateSodan calls api.v1.APIService.CreateSodan.
func (c *aPIServiceClient) CreateSodan(ctx context.Context, req *connect.Request[v1.CreateSodanRequest]) (*connect.Response[v1.CreateSodanResponse], error) {
	return c.createSodan.CallUnary(ctx, req)
}

// GetSodan calls api.v1.APIService.GetSodan.
func (c *aPIServiceClient) GetSodan(ctx context.Context, req *connect.Request[v1.GetSodanRequest]) (*connect.Response[v1.GetSodanResponse], error) {
	return c.getSodan.CallUnary(ctx, req)
}

// GetSodanList calls api.v1.APIService.GetSodanList.
func (c *aPIServiceClient) GetSodanList(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSodanListResponse], error) {
	return c.getSodanList.CallUnary(ctx, req)
}

// CloseSodan calls api.v1.APIService.CloseSodan.
func (c *aPIServiceClient) CloseSodan(ctx context.Context, req *connect.Request[v1.CloseSodanRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.closeSodan.CallUnary(ctx, req)
}

// CreateReply calls api.v1.APIService.CreateReply.
func (c *aPIServiceClient) CreateReply(ctx context.Context, req *connect.Request[v1.CreateReplyRequest]) (*connect.Response[v1.CreateReplyResponse], error) {
	return c.createReply.CallUnary(ctx, req)
}

// GetReply calls api.v1.APIService.GetReply.
func (c *aPIServiceClient) GetReply(ctx context.Context, req *connect.Request[v1.GetReplyRequest]) (*connect.Response[v1.GetReplyResponse], error) {
	return c.getReply.CallUnary(ctx, req)
}

// GetReplies calls api.v1.APIService.GetReplies.
func (c *aPIServiceClient) GetReplies(ctx context.Context, req *connect.Request[v1.GetRepliesRequest]) (*connect.Response[v1.GetRepliesResponse], error) {
	return c.getReplies.CallUnary(ctx, req)
}

// SubscribeSodan calls api.v1.APIService.SubscribeSodan.
func (c *aPIServiceClient) SubscribeSodan(ctx context.Context, req *connect.Request[v1.SubscribeSodanRequest]) (*connect.ServerStreamForClient[v1.SubscribeSodanResponse], error) {
	return c.subscribeSodan.CallServerStream(ctx, req)
}

// APIServiceHandler is an implementation of the api.v1.APIService service.
type APIServiceHandler interface {
	// Sodan
	CreateSodan(context.Context, *connect.Request[v1.CreateSodanRequest]) (*connect.Response[v1.CreateSodanResponse], error)
	GetSodan(context.Context, *connect.Request[v1.GetSodanRequest]) (*connect.Response[v1.GetSodanResponse], error)
	// 10個ぐらい最新のを取得する
	GetSodanList(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSodanListResponse], error)
	CloseSodan(context.Context, *connect.Request[v1.CloseSodanRequest]) (*connect.Response[emptypb.Empty], error)
	// Chat
	CreateReply(context.Context, *connect.Request[v1.CreateReplyRequest]) (*connect.Response[v1.CreateReplyResponse], error)
	GetReply(context.Context, *connect.Request[v1.GetReplyRequest]) (*connect.Response[v1.GetReplyResponse], error)
	GetReplies(context.Context, *connect.Request[v1.GetRepliesRequest]) (*connect.Response[v1.GetRepliesResponse], error)
	SubscribeSodan(context.Context, *connect.Request[v1.SubscribeSodanRequest], *connect.ServerStream[v1.SubscribeSodanResponse]) error
}

// NewAPIServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIServiceHandler(svc APIServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aPIServiceCreateSodanHandler := connect.NewUnaryHandler(
		APIServiceCreateSodanProcedure,
		svc.CreateSodan,
		opts...,
	)
	aPIServiceGetSodanHandler := connect.NewUnaryHandler(
		APIServiceGetSodanProcedure,
		svc.GetSodan,
		opts...,
	)
	aPIServiceGetSodanListHandler := connect.NewUnaryHandler(
		APIServiceGetSodanListProcedure,
		svc.GetSodanList,
		opts...,
	)
	aPIServiceCloseSodanHandler := connect.NewUnaryHandler(
		APIServiceCloseSodanProcedure,
		svc.CloseSodan,
		opts...,
	)
	aPIServiceCreateReplyHandler := connect.NewUnaryHandler(
		APIServiceCreateReplyProcedure,
		svc.CreateReply,
		opts...,
	)
	aPIServiceGetReplyHandler := connect.NewUnaryHandler(
		APIServiceGetReplyProcedure,
		svc.GetReply,
		opts...,
	)
	aPIServiceGetRepliesHandler := connect.NewUnaryHandler(
		APIServiceGetRepliesProcedure,
		svc.GetReplies,
		opts...,
	)
	aPIServiceSubscribeSodanHandler := connect.NewServerStreamHandler(
		APIServiceSubscribeSodanProcedure,
		svc.SubscribeSodan,
		opts...,
	)
	return "/api.v1.APIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case APIServiceCreateSodanProcedure:
			aPIServiceCreateSodanHandler.ServeHTTP(w, r)
		case APIServiceGetSodanProcedure:
			aPIServiceGetSodanHandler.ServeHTTP(w, r)
		case APIServiceGetSodanListProcedure:
			aPIServiceGetSodanListHandler.ServeHTTP(w, r)
		case APIServiceCloseSodanProcedure:
			aPIServiceCloseSodanHandler.ServeHTTP(w, r)
		case APIServiceCreateReplyProcedure:
			aPIServiceCreateReplyHandler.ServeHTTP(w, r)
		case APIServiceGetReplyProcedure:
			aPIServiceGetReplyHandler.ServeHTTP(w, r)
		case APIServiceGetRepliesProcedure:
			aPIServiceGetRepliesHandler.ServeHTTP(w, r)
		case APIServiceSubscribeSodanProcedure:
			aPIServiceSubscribeSodanHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIServiceHandler struct{}

func (UnimplementedAPIServiceHandler) CreateSodan(context.Context, *connect.Request[v1.CreateSodanRequest]) (*connect.Response[v1.CreateSodanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.CreateSodan is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetSodan(context.Context, *connect.Request[v1.GetSodanRequest]) (*connect.Response[v1.GetSodanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetSodan is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetSodanList(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSodanListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetSodanList is not implemented"))
}

func (UnimplementedAPIServiceHandler) CloseSodan(context.Context, *connect.Request[v1.CloseSodanRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.CloseSodan is not implemented"))
}

func (UnimplementedAPIServiceHandler) CreateReply(context.Context, *connect.Request[v1.CreateReplyRequest]) (*connect.Response[v1.CreateReplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.CreateReply is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetReply(context.Context, *connect.Request[v1.GetReplyRequest]) (*connect.Response[v1.GetReplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetReply is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetReplies(context.Context, *connect.Request[v1.GetRepliesRequest]) (*connect.Response[v1.GetRepliesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.GetReplies is not implemented"))
}

func (UnimplementedAPIServiceHandler) SubscribeSodan(context.Context, *connect.Request[v1.SubscribeSodanRequest], *connect.ServerStream[v1.SubscribeSodanResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.APIService.SubscribeSodan is not implemented"))
}
